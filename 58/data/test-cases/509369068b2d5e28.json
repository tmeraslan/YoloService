{"uid":"509369068b2d5e28","name":"test_predict_with_detected_object","fullName":"tests.test_predict.TestPredictEndpoint#test_predict_with_detected_object","historyId":"312382ba718a03afdbdc04446fe770a4","time":{"start":1757236096177,"stop":1757236096190,"duration":13},"status":"broken","statusMessage":"KeyError: 's3'","statusTrace":"self = <tests.test_predict.TestPredictEndpoint testMethod=test_predict_with_detected_object>\nmock_save_img = <MagicMock name='save' id='139908015656304'>\nmock_open_func = <MagicMock name='open' id='139907976305872'>\nmock_copyfileobj = <MagicMock name='copyfileobj' id='139907976309760'>\nmock_model = <MagicMock name='model' id='139907975774624'>\nmock_save_detection = <MagicMock name='query_save_detection_object' id='139907975778416'>\nmock_save_session = <MagicMock name='query_save_prediction_session' id='139907975782208'>\n\n    @patch(\"queries.query_save_prediction_session\")\n    @patch(\"queries.query_save_detection_object\")\n    @patch(\"controllers.model\")\n    @patch(\"shutil.copyfileobj\")\n    @patch(\"builtins.open\", new_callable=mock_open)\n    @patch(\"PIL.Image.Image.save\")\n    def test_predict_with_detected_object(\n        self,\n        mock_save_img,\n        mock_open_func,\n        mock_copyfileobj,\n        mock_model,\n        mock_save_detection,\n        mock_save_session,\n    ):\n        # 2 תיבות מדומות\n        mock_box1 = MagicMock()\n        mock_box1.cls = [MagicMock(item=MagicMock(return_value=0))]\n        mock_box1.conf = [0.9]\n        mock_box1.xyxy = [np.array([1, 2, 3, 4])]\n    \n        mock_box2 = MagicMock()\n        mock_box2.cls = [MagicMock(item=MagicMock(return_value=1))]\n        mock_box2.conf = [0.8]\n        mock_box2.xyxy = [np.array([5, 6, 7, 8])]\n    \n        mock_result = MagicMock()\n        mock_result.boxes = [mock_box1, mock_box2]\n    \n        img = Image.new(\"RGB\", (20, 20), color=(0, 255, 0))\n        mock_result.plot.return_value = np.array(img)\n    \n        mock_model.names = {0: \"cat\", 1: \"dog\"}\n        mock_model.return_value = [mock_result]\n    \n        img_bytes = create_image_bytes()\n        files = {\"file\": (\"beatles.jpeg\", img_bytes, \"image/jpeg\")}\n        resp = client.post(\"/predict\", files=files, headers=get_auth_headers())\n    \n        self.assertEqual(resp.status_code, 200)\n        data = resp.json()\n        self.assertEqual(data[\"detection_count\"], 2)\n        self.assertIn(\"cat\", data[\"labels\"])\n        self.assertIn(\"dog\", data[\"labels\"])\n        self.assertEqual(mock_save_detection.call_count, 2)\n    \n        # בדיקת בלוק ה-S3: הסיומת צריכה להיות .jpeg לפי שם הקובץ\n>       self.assertTrue(data[\"s3\"][\"original_key\"].endswith(\".jpeg\"))\nE       KeyError: 's3'\n\ntests/test_predict.py:180: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"fake_ultralytics_module","time":{"start":1757236095789,"stop":1757236095790,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_unittest_setUpClass_fixture_TestPredictEndpoint","time":{"start":1757236096086,"stop":1757236096086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_verify_user","time":{"start":1757236096176,"stop":1757236096176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1757236096176,"stop":1757236096176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"stub_queries_writes","time":{"start":1757236096176,"stop":1757236096176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"monkeypatch::0","time":{"start":1757236096198,"stop":1757236096198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_unittest_setUpClass_fixture_TestPredictEndpoint::0","time":{"start":1757236096199,"stop":1757236096199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fake_ultralytics_module::0","time":{"start":1757236096237,"stop":1757236096237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_predict"},{"name":"subSuite","value":"TestPredictEndpoint"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2208-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_predict"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"509369068b2d5e28.json","parameterValues":[]}