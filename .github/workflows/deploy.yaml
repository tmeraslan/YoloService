

name: Test and Deploy Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step One: Download the Code
      - name: Checkout code
        uses: actions/checkout@v4

      # Installing Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Installing dependencies (including pytest from requirements.txt)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements.txt
          pip install allure-pytest

      #  Running tests with coverage and generating XML report
      - name: Run tests with coverage
        run: |
          mkdir -p allure-results
          pytest --cov --cov-branch --cov-report=xml --alluredir=allure-results tests/


      #  Uploading coverage  report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Upload Allure results as artifact
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: allure-results
          path: allure-results/
          retention-days: 30

  allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results-downloaded
          merge-multiple: false


      - name: Merge all results into single directory
        run: |
          mkdir -p allure-results
          for dir in allure-results-downloaded/*/; do
            if [ -d "$dir" ]; then
              cp -r "$dir"* allure-results/ 2>/dev/null || true
            fi
          done
          
      - name: Generate and Deploy Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20
   
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
          publish_dir: allure-history

  deploy:
    runs-on: ubuntu-latest
    needs: test   # deploy will only run if the tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ubuntu/YoloService || (git clone https://github.com/tmeraslan/YoloService.git && cd YoloService)

            git reset --hard
            git pull origin main

            if [ ! -d "venv" ]; then
                sudo apt-get update
                sudo apt-get install -y python3-venv python3-pip
                python3 -m venv venv
            fi

            source venv/bin/activate
            pip install --upgrade pip
            if [ -f requirements.txt ]; then
                pip install -r requirements.txt
            fi

            sudo systemctl daemon-reload
            sudo systemctl restart yolo || sudo systemctl start yolo















# name: Test and Deploy Service

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# # דרוש לכתיבה ל-gh-pages
# permissions:
#   contents: write

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install allure-pytest

#       - name: Run tests with coverage
#         run: |
#           mkdir -p allure-results
#           pytest --cov --cov-branch --cov-report=xml --alluredir=allure-results/

#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v3
#         with:
#           file: ./coverage.xml
#           token: ${{ secrets.CODECOV_TOKEN }}
#           fail_ci_if_error: true

#       - name: Upload Allure results as artifact
#         uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: allure-results
#           path: allure-results/
#           retention-days: 30

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to server
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.HOST }}
#           username: ubuntu
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             cd /home/ubuntu/YoloService || (git clone https://github.com/tmeraslan/YoloService.git && cd YoloService)
#             git reset --hard
#             git pull origin main
#             if [ ! -d "venv" ]; then
#               sudo apt-get update
#               sudo apt-get install -y python3-venv python3-pip
#               python3 -m venv venv
#             fi
#             source venv/bin/activate
#             pip install --upgrade pip
#             if [ -f requirements.txt ]; then
#               pip install -r requirements.txt
#             fi
#             sudo systemctl daemon-reload
#             sudo systemctl restart yolo || sudo systemctl start yolo

#   allure-report:
#       runs-on: ubuntu-latest
#       needs: test
#       if: always()
#       steps:
#         - name: Checkout code
#           uses: actions/checkout@v4

#         # הורדה לפי name תואם
#         - name: Download Allure results
#           uses: actions/download-artifact@v4
#           with:
#             name: allure-results
#             path: allure-results
#             merge-multiple: false

#         # אופציונלי: לאבחון—לוודא שיש קבצים
#         - name: List results
#           run: ls -la allure-results

#         - name: Generate and Deploy Allure Report
#           uses: simple-elf/allure-report-action@master
#           with:
#             allure_results: allure-results
#             allure_report: allure-report
#             gh_pages: gh-pages
#             allure_history: allure-history
#             keep_reports: 20

#         - name: Deploy to GitHub Pages
#           uses: peaceiris/actions-gh-pages@v3
#           with:
#             github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }} # או השתמש ב-GITHUB_TOKEN
#             publish_dir: allure-history
















